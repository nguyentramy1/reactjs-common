.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}



























dropdownfield.scss
.input-dropdown {
    display: inline-block;
    position: relative; // Đặt position relative để dropdown list bám vào đây 
  
    .input-show {
      border-radius: 8px;
      border: 1px solid #d6d6d6;
      overflow: hidden;
      background-color: #ffffff;
      width: 444px;
      height: 40px;
      align-items: center;
      cursor: pointer;
      transition: all linear 0.1s;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
      font-size: 14px;

  
      &:hover {
        border: 1px solid #009ae3;
        background-color: #ffffff;
      }
      &:active {
        background-color: #ffffff;
      }
  
      .flex-between {
      display: flex;
       align-items: center;
        width: 100%;
        justify-content: space-between;
  
        .dropdown {
          position: relative;
          margin-left: auto; 
          display: grid;
          align-items: center;
          .drop-icon {
            mask-image: url(./assets/arrow.png);
            mask-size: cover;
            width: 24px;
            aspect-ratio: 1/1;
          }

          .icon-open {
            transition: all linear 0.2s;
            transform: rotateZ(0deg);
            .drop-icon {
              background-color: red;
            }
          }
          .icon-close {
            transition: all linear 0.2s;
            transform: rotateZ(180deg);
            .drop-icon {
              background-color: #858585;
            }
          }
          
        }
  
        .selected-text {
          color: #adadad;
          margin-right: 8px;
        }
        .selected-text-option{
            color: #6b6969;
            margin-right: 8px;
        }
      }
    }
    .input-show-open {
      border-color: red;
    }
  
    .dropdown-list {
        position: absolute;
        top: 40px;
        width: 444px;
        border-radius: 8px;
        background: #ffffff;
        list-style: none;
        padding: 0;
        left: 10px;
        max-height: 380px; 
        font-size: 14px;
        
   
    .list-wrapper {
        max-height: 380px; 
        overflow-y: auto;   
        border-radius: 8px;
        background-color: #ffffff;
      
        &::-webkit-scrollbar {
          width: 4px;
          height: 64px; 
        }
      
        &::-webkit-scrollbar-thumb {
          background-color: #D6D6D6;
          border-radius: 4px;
        }
      
        &::-webkit-scrollbar-thumb:hover {
          background-color: #555;
        }
        .list{
          
          li {
            transition: all linear 0.1s;
            cursor: pointer;
            text-align: left; 
            
            &:hover {
              background-color: #EAEAEA;
              border-radius: 8px;

            }
            &.selected-option {
              background-color: #CCEBF9;
              border-radius: 8px;

            }
          }
        }
        
      }
    }
    
  
    .dropdown-list-open {
      border: 1px solid #ccc;
      .list-wrapper{
        
        .list{
          margin-left: 8px;
          margin-right: 8px;
         
          li {
            padding: 8px;
            height: auto;
            overflow: hidden;
          }
        }
      }
      
    }
  
    .dropdown-list-close {
      height: 0px;
      border: none;
  
      li {
        padding: 0;
        height: 0px;

      }

    }
  }



DropDownField.tsx
import React, { useState,useRef} from "react";
import "./DropDownField.scss";
import Button from "../../Button/Button.tsx";
import useOnChange from "./hooks/useOnChange.tsx";
import useClickOutSide from "./hooks/useClickOutSide.tsx";


export interface optionType {
  value: string;
  label: string;
}

interface InputDropdownProps {
  options: optionType[];
  onChange: (e: optionType) => void;
  selected: string | undefined;
}

const DropDownField: React.FC<InputDropdownProps> = ({ 
  options,
  onChange,
  selected, 
}) => {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [selectedOption, setSelectedOption] = useState<optionType | null>(null);
  const dropdownRef = useRef<HTMLDivElement | null>(null);
  useClickOutSide(dropdownRef, setIsDropdownOpen);
  const { handleOptionSelect, toggleDropdown } = useOnChange(
    setIsDropdownOpen,
    selectedOption,
    setSelectedOption,
    onChange
  );

 

  return (
    <div className="input-dropdown" ref={dropdownRef}>
      <Button
        className={`input-show ${
          isDropdownOpen ? "input-show-open" : "input-show-close"
        }`}
        onClick={toggleDropdown}
        content={
          <div className="flex-between">
            <div
              className={`selected-text ${
                selected ? "selected-text-option" : ""
              }`}
            >
              {selected ? selected : "Chọn"}
            </div>
            <div className="dropdown">
              <div className={isDropdownOpen ? "icon-open" : "icon-close"}>
                <div className="drop-icon" />
              </div>
            </div>
          </div>
        }
      />

      <ul
        className={`dropdown-list ${
          isDropdownOpen ? "dropdown-list-open" : "dropdown-list-close"
        }`}
      >
        <div className="list-wrapper">
          {options.map((option, index) => (
            <div className="list">
              <li
              key={index}
              onClick={() => handleOptionSelect(option)}
              className={
                 selectedOption?.value === option.value
                  ? "selected-option"
                  : "option"
              }
            >
              {option.label}
            </li>
            </div>
          ))}
        </div>
      </ul>
    </div>
  );
};

export default DropDownField;
